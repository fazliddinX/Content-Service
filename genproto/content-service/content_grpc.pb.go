// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: content.proto

package content_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Content_CreateStory_FullMethodName             = "/protos.Content/CreateStory"
	Content_UpdateStory_FullMethodName             = "/protos.Content/UpdateStory"
	Content_DeleteStory_FullMethodName             = "/protos.Content/DeleteStory"
	Content_GetStories_FullMethodName              = "/protos.Content/GetStories"
	Content_GetFullStoryInfo_FullMethodName        = "/protos.Content/GetFullStoryInfo"
	Content_AddCommentStory_FullMethodName         = "/protos.Content/AddCommentStory"
	Content_GetComments_FullMethodName             = "/protos.Content/GetComments"
	Content_AddLikeToStory_FullMethodName          = "/protos.Content/AddLikeToStory"
	Content_CreateItineraries_FullMethodName       = "/protos.Content/CreateItineraries"
	Content_UpdateItineraries_FullMethodName       = "/protos.Content/UpdateItineraries"
	Content_DeleteItineraries_FullMethodName       = "/protos.Content/DeleteItineraries"
	Content_GetItineraries_FullMethodName          = "/protos.Content/GetItineraries"
	Content_AddLikeItineraries_FullMethodName      = "/protos.Content/AddLikeItineraries"
	Content_AddCommentItineraries_FullMethodName   = "/protos.Content/AddCommentItineraries"
	Content_GetDescriptions_FullMethodName         = "/protos.Content/GetDescriptions"
	Content_GetDestinationById_FullMethodName      = "/protos.Content/GetDestinationById"
	Content_CreateMessage_FullMethodName           = "/protos.Content/CreateMessage"
	Content_GetMessages_FullMethodName             = "/protos.Content/GetMessages"
	Content_CreateTravelTips_FullMethodName        = "/protos.Content/CreateTravelTips"
	Content_GetTravelTips_FullMethodName           = "/protos.Content/GetTravelTips"
	Content_GetUserStatistics_FullMethodName       = "/protos.Content/GetUserStatistics"
	Content_GetTrendingDestinations_FullMethodName = "/protos.Content/GetTrendingDestinations"
)

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	CreateStory(ctx context.Context, in *Story, opts ...grpc.CallOption) (*Story, error)
	UpdateStory(ctx context.Context, in *PutStory, opts ...grpc.CallOption) (*Story, error)
	DeleteStory(ctx context.Context, in *StoryId, opts ...grpc.CallOption) (*MessageSuccess, error)
	GetStories(ctx context.Context, in *FilterStories, opts ...grpc.CallOption) (*Stories, error)
	GetFullStoryInfo(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*FullStory, error)
	AddCommentStory(ctx context.Context, in *StoryComment, opts ...grpc.CallOption) (*StoryCommentInfo, error)
	GetComments(ctx context.Context, in *FilterComment, opts ...grpc.CallOption) (*StoryComments, error)
	AddLikeToStory(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeInfo, error)
	CreateItineraries(ctx context.Context, in *Itineraries, opts ...grpc.CallOption) (*InfoItineraries, error)
	UpdateItineraries(ctx context.Context, in *PutItineraries, opts ...grpc.CallOption) (*InfoItineraries, error)
	DeleteItineraries(ctx context.Context, in *ItinerariesId, opts ...grpc.CallOption) (*MessageSuccess, error)
	GetItineraries(ctx context.Context, in *FilterItineraries, opts ...grpc.CallOption) (*AllItineraries, error)
	AddLikeItineraries(ctx context.Context, in *LikeItinerariesInfo, opts ...grpc.CallOption) (*LikeItinerariesInfo, error)
	AddCommentItineraries(ctx context.Context, in *ItinerariesComment, opts ...grpc.CallOption) (*ItinerariesCommentInfo, error)
	GetDescriptions(ctx context.Context, in *FilterDestinations, opts ...grpc.CallOption) (*Destinations, error)
	GetDestinationById(ctx context.Context, in *DestinationId, opts ...grpc.CallOption) (*FullDestinations, error)
	CreateMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error)
	GetMessages(ctx context.Context, in *GetMessage, opts ...grpc.CallOption) (*Messages, error)
	CreateTravelTips(ctx context.Context, in *TravelTipReq, opts ...grpc.CallOption) (*TravelTipRes, error)
	GetTravelTips(ctx context.Context, in *FilterTravelTip, opts ...grpc.CallOption) (*TravelTips, error)
	GetUserStatistics(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserStatistics, error)
	GetTrendingDestinations(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DestinationsRes, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) CreateStory(ctx context.Context, in *Story, opts ...grpc.CallOption) (*Story, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Story)
	err := c.cc.Invoke(ctx, Content_CreateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateStory(ctx context.Context, in *PutStory, opts ...grpc.CallOption) (*Story, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Story)
	err := c.cc.Invoke(ctx, Content_UpdateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteStory(ctx context.Context, in *StoryId, opts ...grpc.CallOption) (*MessageSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageSuccess)
	err := c.cc.Invoke(ctx, Content_DeleteStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetStories(ctx context.Context, in *FilterStories, opts ...grpc.CallOption) (*Stories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stories)
	err := c.cc.Invoke(ctx, Content_GetStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetFullStoryInfo(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*FullStory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullStory)
	err := c.cc.Invoke(ctx, Content_GetFullStoryInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) AddCommentStory(ctx context.Context, in *StoryComment, opts ...grpc.CallOption) (*StoryCommentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoryCommentInfo)
	err := c.cc.Invoke(ctx, Content_AddCommentStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetComments(ctx context.Context, in *FilterComment, opts ...grpc.CallOption) (*StoryComments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoryComments)
	err := c.cc.Invoke(ctx, Content_GetComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) AddLikeToStory(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeInfo)
	err := c.cc.Invoke(ctx, Content_AddLikeToStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateItineraries(ctx context.Context, in *Itineraries, opts ...grpc.CallOption) (*InfoItineraries, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoItineraries)
	err := c.cc.Invoke(ctx, Content_CreateItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateItineraries(ctx context.Context, in *PutItineraries, opts ...grpc.CallOption) (*InfoItineraries, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoItineraries)
	err := c.cc.Invoke(ctx, Content_UpdateItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteItineraries(ctx context.Context, in *ItinerariesId, opts ...grpc.CallOption) (*MessageSuccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageSuccess)
	err := c.cc.Invoke(ctx, Content_DeleteItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetItineraries(ctx context.Context, in *FilterItineraries, opts ...grpc.CallOption) (*AllItineraries, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllItineraries)
	err := c.cc.Invoke(ctx, Content_GetItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) AddLikeItineraries(ctx context.Context, in *LikeItinerariesInfo, opts ...grpc.CallOption) (*LikeItinerariesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeItinerariesInfo)
	err := c.cc.Invoke(ctx, Content_AddLikeItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) AddCommentItineraries(ctx context.Context, in *ItinerariesComment, opts ...grpc.CallOption) (*ItinerariesCommentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItinerariesCommentInfo)
	err := c.cc.Invoke(ctx, Content_AddCommentItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetDescriptions(ctx context.Context, in *FilterDestinations, opts ...grpc.CallOption) (*Destinations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Destinations)
	err := c.cc.Invoke(ctx, Content_GetDescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetDestinationById(ctx context.Context, in *DestinationId, opts ...grpc.CallOption) (*FullDestinations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullDestinations)
	err := c.cc.Invoke(ctx, Content_GetDestinationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageRes)
	err := c.cc.Invoke(ctx, Content_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetMessages(ctx context.Context, in *GetMessage, opts ...grpc.CallOption) (*Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages)
	err := c.cc.Invoke(ctx, Content_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateTravelTips(ctx context.Context, in *TravelTipReq, opts ...grpc.CallOption) (*TravelTipRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TravelTipRes)
	err := c.cc.Invoke(ctx, Content_CreateTravelTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetTravelTips(ctx context.Context, in *FilterTravelTip, opts ...grpc.CallOption) (*TravelTips, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TravelTips)
	err := c.cc.Invoke(ctx, Content_GetTravelTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetUserStatistics(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatistics)
	err := c.cc.Invoke(ctx, Content_GetUserStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetTrendingDestinations(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DestinationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestinationsRes)
	err := c.cc.Invoke(ctx, Content_GetTrendingDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	CreateStory(context.Context, *Story) (*Story, error)
	UpdateStory(context.Context, *PutStory) (*Story, error)
	DeleteStory(context.Context, *StoryId) (*MessageSuccess, error)
	GetStories(context.Context, *FilterStories) (*Stories, error)
	GetFullStoryInfo(context.Context, *LikeReq) (*FullStory, error)
	AddCommentStory(context.Context, *StoryComment) (*StoryCommentInfo, error)
	GetComments(context.Context, *FilterComment) (*StoryComments, error)
	AddLikeToStory(context.Context, *LikeReq) (*LikeInfo, error)
	CreateItineraries(context.Context, *Itineraries) (*InfoItineraries, error)
	UpdateItineraries(context.Context, *PutItineraries) (*InfoItineraries, error)
	DeleteItineraries(context.Context, *ItinerariesId) (*MessageSuccess, error)
	GetItineraries(context.Context, *FilterItineraries) (*AllItineraries, error)
	AddLikeItineraries(context.Context, *LikeItinerariesInfo) (*LikeItinerariesInfo, error)
	AddCommentItineraries(context.Context, *ItinerariesComment) (*ItinerariesCommentInfo, error)
	GetDescriptions(context.Context, *FilterDestinations) (*Destinations, error)
	GetDestinationById(context.Context, *DestinationId) (*FullDestinations, error)
	CreateMessage(context.Context, *MessageReq) (*MessageRes, error)
	GetMessages(context.Context, *GetMessage) (*Messages, error)
	CreateTravelTips(context.Context, *TravelTipReq) (*TravelTipRes, error)
	GetTravelTips(context.Context, *FilterTravelTip) (*TravelTips, error)
	GetUserStatistics(context.Context, *UserId) (*UserStatistics, error)
	GetTrendingDestinations(context.Context, *Void) (*DestinationsRes, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) CreateStory(context.Context, *Story) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedContentServer) UpdateStory(context.Context, *PutStory) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedContentServer) DeleteStory(context.Context, *StoryId) (*MessageSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedContentServer) GetStories(context.Context, *FilterStories) (*Stories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStories not implemented")
}
func (UnimplementedContentServer) GetFullStoryInfo(context.Context, *LikeReq) (*FullStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullStoryInfo not implemented")
}
func (UnimplementedContentServer) AddCommentStory(context.Context, *StoryComment) (*StoryCommentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentStory not implemented")
}
func (UnimplementedContentServer) GetComments(context.Context, *FilterComment) (*StoryComments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedContentServer) AddLikeToStory(context.Context, *LikeReq) (*LikeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikeToStory not implemented")
}
func (UnimplementedContentServer) CreateItineraries(context.Context, *Itineraries) (*InfoItineraries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItineraries not implemented")
}
func (UnimplementedContentServer) UpdateItineraries(context.Context, *PutItineraries) (*InfoItineraries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItineraries not implemented")
}
func (UnimplementedContentServer) DeleteItineraries(context.Context, *ItinerariesId) (*MessageSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItineraries not implemented")
}
func (UnimplementedContentServer) GetItineraries(context.Context, *FilterItineraries) (*AllItineraries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItineraries not implemented")
}
func (UnimplementedContentServer) AddLikeItineraries(context.Context, *LikeItinerariesInfo) (*LikeItinerariesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikeItineraries not implemented")
}
func (UnimplementedContentServer) AddCommentItineraries(context.Context, *ItinerariesComment) (*ItinerariesCommentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentItineraries not implemented")
}
func (UnimplementedContentServer) GetDescriptions(context.Context, *FilterDestinations) (*Destinations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptions not implemented")
}
func (UnimplementedContentServer) GetDestinationById(context.Context, *DestinationId) (*FullDestinations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationById not implemented")
}
func (UnimplementedContentServer) CreateMessage(context.Context, *MessageReq) (*MessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedContentServer) GetMessages(context.Context, *GetMessage) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedContentServer) CreateTravelTips(context.Context, *TravelTipReq) (*TravelTipRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTravelTips not implemented")
}
func (UnimplementedContentServer) GetTravelTips(context.Context, *FilterTravelTip) (*TravelTips, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravelTips not implemented")
}
func (UnimplementedContentServer) GetUserStatistics(context.Context, *UserId) (*UserStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistics not implemented")
}
func (UnimplementedContentServer) GetTrendingDestinations(context.Context, *Void) (*DestinationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingDestinations not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Story)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateStory(ctx, req.(*Story))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateStory(ctx, req.(*PutStory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_DeleteStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteStory(ctx, req.(*StoryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetStories(ctx, req.(*FilterStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetFullStoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetFullStoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetFullStoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetFullStoryInfo(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_AddCommentStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoryComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).AddCommentStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_AddCommentStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).AddCommentStory(ctx, req.(*StoryComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetComments(ctx, req.(*FilterComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_AddLikeToStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).AddLikeToStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_AddLikeToStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).AddLikeToStory(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Itineraries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateItineraries(ctx, req.(*Itineraries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutItineraries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_UpdateItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateItineraries(ctx, req.(*PutItineraries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItinerariesId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_DeleteItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteItineraries(ctx, req.(*ItinerariesId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterItineraries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetItineraries(ctx, req.(*FilterItineraries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_AddLikeItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeItinerariesInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).AddLikeItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_AddLikeItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).AddLikeItineraries(ctx, req.(*LikeItinerariesInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_AddCommentItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItinerariesComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).AddCommentItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_AddCommentItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).AddCommentItineraries(ctx, req.(*ItinerariesComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDestinations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetDescriptions(ctx, req.(*FilterDestinations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetDestinationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestinationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetDestinationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetDestinationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetDestinationById(ctx, req.(*DestinationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateMessage(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetMessages(ctx, req.(*GetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateTravelTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TravelTipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateTravelTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateTravelTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateTravelTips(ctx, req.(*TravelTipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetTravelTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTravelTip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetTravelTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetTravelTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetTravelTips(ctx, req.(*FilterTravelTip))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetUserStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetUserStatistics(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetTrendingDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetTrendingDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetTrendingDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetTrendingDestinations(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStory",
			Handler:    _Content_CreateStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _Content_UpdateStory_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _Content_DeleteStory_Handler,
		},
		{
			MethodName: "GetStories",
			Handler:    _Content_GetStories_Handler,
		},
		{
			MethodName: "GetFullStoryInfo",
			Handler:    _Content_GetFullStoryInfo_Handler,
		},
		{
			MethodName: "AddCommentStory",
			Handler:    _Content_AddCommentStory_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Content_GetComments_Handler,
		},
		{
			MethodName: "AddLikeToStory",
			Handler:    _Content_AddLikeToStory_Handler,
		},
		{
			MethodName: "CreateItineraries",
			Handler:    _Content_CreateItineraries_Handler,
		},
		{
			MethodName: "UpdateItineraries",
			Handler:    _Content_UpdateItineraries_Handler,
		},
		{
			MethodName: "DeleteItineraries",
			Handler:    _Content_DeleteItineraries_Handler,
		},
		{
			MethodName: "GetItineraries",
			Handler:    _Content_GetItineraries_Handler,
		},
		{
			MethodName: "AddLikeItineraries",
			Handler:    _Content_AddLikeItineraries_Handler,
		},
		{
			MethodName: "AddCommentItineraries",
			Handler:    _Content_AddCommentItineraries_Handler,
		},
		{
			MethodName: "GetDescriptions",
			Handler:    _Content_GetDescriptions_Handler,
		},
		{
			MethodName: "GetDestinationById",
			Handler:    _Content_GetDestinationById_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Content_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Content_GetMessages_Handler,
		},
		{
			MethodName: "CreateTravelTips",
			Handler:    _Content_CreateTravelTips_Handler,
		},
		{
			MethodName: "GetTravelTips",
			Handler:    _Content_GetTravelTips_Handler,
		},
		{
			MethodName: "GetUserStatistics",
			Handler:    _Content_GetUserStatistics_Handler,
		},
		{
			MethodName: "GetTrendingDestinations",
			Handler:    _Content_GetTrendingDestinations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
